# 'Allow scripts to access the OAuth token' was selected in pipeline.  Add the following YAML to any steps requiring access:
#       env:
#           MY_ACCESS_TOKEN: $(System.AccessToken)
# Variable 'PackageVersion' was defined in the Variables tab
# Variable 'PassPhrase' was defined in the Variables tab
# Variable Group 'JavaVariableGroup' was defined in the Variables tab
# Variable Group 'JavaSigningVariableGroup' was defined in the Variables tab
# Cron Schedules have been converted using UTC Time Zone and may need to be updated for your location

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
    vmImage: windows-2019

trigger: none # ci trigger is set in ADO
pr: none # pr trigger is set in ADO

jobs:
- job: Phase_1
  displayName: Phase 1

  steps:
  - powershell: |
     # Replace {DateStamp} and {CommitHash} tokens with the actual values in var PackageVersion
     $dateStamp = (Get-Date -format "yyyyMMdd");
     $commitHash = "$(Build.SourceVersion)".SubString(0,7);

     "Raw PackageVersion = $(PackageVersion)";
     $v = "$(PackageVersion)".Replace("{DateStamp}",$dateStamp).Replace("{CommitHash}",$commitHash);
     Write-Host "##vso[task.setvariable variable=PackageVersion;]$v";
     "Resolved PackageVersion = $v";
    displayName: 'Resolve variable PackageVersion'

  - task: tagBuildOrRelease@0
    displayName: Tag Build with package version
    inputs:
      tags: PackageVersion=$(PackageVersion)

  - powershell: |
        Write-Host "Setting module versions";
        Write-Host "version = $(PackageVersion)";

        mvn versions:set -DnewVersion="$(PackageVersion)" --no-transfer-progress;

        Write-Host "Completed";
    displayName: Maven set versions in pom files

  - powershell: |
        gpg --version

        Write-Host "Public key:";
        $file = "public.pgp";
        $key =  "$(PgpSigningPublicKey)";

        # Restore the missing newlines to the key
        $cut1 = $key.Substring(0, 80).LastIndexOf('-') + 2;
        $cut2 = $key.Substring($cut1).IndexOf('-') + $cut1;
        $firstLine = $key.Substring(0, $cut1);
        $lastLine = $key.Substring($cut2);
        $middleLine = $key.Substring($cut1, $cut2 - $cut1);
        $middleLine = $middleLine.Replace(" ", "`r`n");
        $key2 = -Join ($firstLine, "`r`n", $middleLine, $lastLine);
        New-Item -Path $file -ItemType "file" -Value $key2;

        #'-------------'; get-content "$file"; '==================='

        gpg --import $file;
        Remove-Item $file;

        Write-Host "Private key:"
        $file = "private.pgp";
        $key =  "$(PgpSigningPrivateKey)";
        $passPhrase = "$(PassPhrase)";

        $cut1 = $key.Substring(0, 80).LastIndexOf('-') + 2;
        $cut2 = $key.Substring($cut1).IndexOf('-') + $cut1;
        $firstLine = $key.Substring(0, $cut1);
        $lastLine = $key.Substring($cut2);
        $middleLine = $key.Substring($cut1, $cut2 - $cut1);
        $middleLine = $middleLine.Replace(" ", "`r`n");
        $key2 = -Join ($firstLine, "`r`n", $middleLine, $lastLine);
        New-Item -Path $file -ItemType "file" -Value $key2;
        gpg --allow-secret-key-import --import $file;
        Remove-Item $file;
    displayName: Import signing keys

  - powershell: |
        $file = "$(Build.SourcesDirectory)\pom.xml";
        $xml = New-Object XML;
        $xml.Load($file);
        $nsm = New-Object Xml.XmlNamespaceManager($xml.NameTable);
        $nsm.AddNamespace('ns', $xml.DocumentElement.NamespaceURI);
        $element = $xml.SelectSingleNode('//ns:version', $nsm);
        #$element.InnerText = "$(PackageVersion)"
        #$xml.Save($file);
        Write-Host $file '+++++++++++++++++++++++++++++++++++';
        Write-Host $element.InnerText;
        get-content $file;

        $file = "$(Build.SourcesDirectory)\libraries\bot-builder\pom.xml";
        $xml = New-Object XML;
        $xml.Load($file);
        $nsm = New-Object Xml.XmlNamespaceManager($xml.NameTable);
        $nsm.AddNamespace('ns', $xml.DocumentElement.NamespaceURI);
        $element = $xml.SelectSingleNode('//ns:version', $nsm);
        #$element.InnerText = "$(PackageVersion)"
        #$xml.Save($file);
        Write-Host $file '+++++++++++++++++++++++++++++++++++';
        Write-Host $element.InnerText;
        get-content $file;

        $file = "$(Build.SourcesDirectory)\libraries\bot-schema\pom.xml";
        $xml = New-Object XML;
        $xml.Load($file);
        $nsm = New-Object Xml.XmlNamespaceManager($xml.NameTable);
        $nsm.AddNamespace('ns', $xml.DocumentElement.NamespaceURI);
        $element = $xml.SelectSingleNode('//ns:version', $nsm);
        #$element.InnerText = "$(PackageVersion)"
        #$xml.Save($file);
        Write-Host $file '+++++++++++++++++++++++++++++++++++';
        Write-Host $element.InnerText;
        get-content $file;

        $file = "$(Build.SourcesDirectory)\libraries\bot-connector\pom.xml";
        $xml = New-Object XML;
        $xml.Load($file);
        $nsm = New-Object Xml.XmlNamespaceManager($xml.NameTable);
        $nsm.AddNamespace('ns', $xml.DocumentElement.NamespaceURI);
        $element = $xml.SelectSingleNode('//ns:version', $nsm);
        #$element.InnerText = "$(PackageVersion)"
        #$xml.Save($file);
        Write-Host $file '+++++++++++++++++++++++++++++++++++';
        Write-Host $element.InnerText;
        get-content $file;
    displayName: '[Diagnostics] Show pom files'

  - task: Maven@3
    displayName: Maven Install (this signs)
    inputs:
      goals: 'install -P devops '
      options: -e --no-transfer-progress -Drepo.id=ConversationalAI -Drepo.url=https://pkgs.dev.azure.com/ConversationalAI/BotFramework/_packaging/SDK/maven/v1 -Dexclude.tests=
      codeCoverageTool: JaCoCo
      findbugsAnalysisEnabled: true

  - task: Maven@3
    displayName: 'Maven Package '
    enabled: False
    inputs:
      goals: package -P devops
      options: -e --no-transfer-progress
      findbugsAnalysisEnabled: true

  - task: Maven@3
    displayName: Maven Deploy
    condition: "and(succeeded(), or(eq(variables['Build.Reason'], 'Schedule'), eq(variables['publish'], 'true'))) "
    enabled: False
    inputs:
      goals: deploy
      options: --settings $(Build.SourcesDirectory)/settings.xml -Dinternal.repo.username=$(MavenUsername) -Dinternal.repo.password=$(MavenPassword) --no-transfer-progress
      testRunTitle: Bot.Builder-Java Tests
      checkstyleAnalysisEnabled: true
      pmdAnalysisEnabled: true
      findbugsAnalysisEnabled: true

  - task: Maven@3
    displayName: Maven deploy to scratch
    enabled: False
    inputs:
      goals: deploy
      options: --settings $(Build.SourcesDirectory)/settings.xml -Dinternal.repo.username=$(JavaMygetUserName) -Dinternal.repo.password=$(JavaMygetApiKey) -e --no-transfer-progress
      publishJUnitResults: false

  - task: CopyFiles@2
    displayName: 'Copy deployment files to staging packages directory'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        libraries/*/target/*.jar
        libraries/*/target/*.jar.asc
        libraries/*/pom.xml
        settings.xml
        pom.xml
      TargetFolder: '$(Build.ArtifactStagingDirectory)/packages'

  - task: PublishBuildArtifacts@1
    displayName: Publish deployment files to artifacts
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/packages

  - powershell: |
        pushd ..;
        Get-ChildItem -Recurse -Force;
    displayName: Dir workspace
    continueOnError: true
    condition: succeededOrFailed()
...
